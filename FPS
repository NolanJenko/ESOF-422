model fps

abstract class Weapon
attributes
end

class M4 < Weapon
attributes
end

class P90 < Weapon
attributes
 damage:Real
 firerate:Real
end



class Enemy
attributes
 health:Integer init:200
end

abstract class PlayerState
operations
 seeEnemy(i:Enemy)
 begin
 end
end


class Neutral < PlayerState
attributes
operations
 seeEnemy(i:Enemy)
 begin
  declare eHealth:Integer;
  eHealth := i.health;
  if (eHealth < 100) then
   self.player.playerState := self.player.attackState
  end;
  if(eHealth > 100) then
   self.player.playerState := self.player.panicState
  end;
 end
end

class Attack < PlayerState
operations
 seeEnemy(i:Enemy)
 begin
 end
 lostOpponent()
  begin
  end
end

class Panic < PlayerState
operations
 seeEnemy(i:Enemy)
  begin
  end
 lostOpponent()
  begin
  end
end


class Die < PlayerState
operations
end

class Player
attributes 
 health:Integer init: 100
 playerState:PlayerState  
 neutralState:Neutral
 attackState:Attack
 panicState:Panic
operations
 initInstance()
 begin
  self.health := 100;
  self.neutralState := new Neutral;
  self.attackState := new Attack;
  self.panicState := new Panic;
  self.playerState := self.neutralState;
 end
 
 seeEnemy(e:Enemy)
 begin
  self.playerState.seeEnemy(e);
 end
 lostOpponent()
  begin
  end
 statemachines
  psm StatePattern
   states
    startMatch:initial
     Neutral	[playerState = neutralState]
     Attack	[playerState = attackState]
     Panic	[playerState = panicState]
   transitions
    startMatch -> Neutral {create}
    Neutral -> Attack { [e.health < 100] seeEnemy()}
    Neutral -> Panic { [e.health > 100] seeEnemy()}
  end
end


association state between
 PlayerState[1]
 Player[1]
end

